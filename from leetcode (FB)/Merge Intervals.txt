Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].


# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        ##x=[]
        ##for i in range(len(intervals)):
        ##    l=[intervals[i].start,intervals[i].end]
        ##   x.append(l)
        
        if intervals==[]:
            return []
        
        intervals.sort(key=lambda x: x.start)
  
        ans=[intervals[0]]
        j=0
        for i in range(1,len(intervals)):
            if intervals[i].start > ans[j].end:
                ans.append(intervals[i])
                j=j+1
            else:
                ans[j].start=min(intervals[i].start,ans[j].start)
                ans[j].end=max(intervals[i].end,ans[j].end)
        
        return ans
    
                
                
                
                
                