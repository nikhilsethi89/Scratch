Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

class TrieNode(object):
    def __init__(self):
        self.children={}
        self.isWord=False


class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root=TrieNode()

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        curr=self.root
        for i in word:
            if i not in curr.children:
                curr.children[i]=TrieNode()
            curr=curr.children[i]
            
        curr.isWord=True

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        return self.helper(self.root,word)
    
    def helper(self, node, word):
        if node.children=={} and word!="":
            return False
        
        if not word:
            return node.isWord
        
        if word[0]=='.':
            for i in node.children:
                if self.helper(node.children[i],word[1:]):
                    return True
            return False
            
        elif word[0] not in node.children:
            return False
        else:
            return self.helper(node.children[word[0]],word[1:])
                
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)