Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

from Queue import PriorityQueue

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        q=PriorityQueue()
        
        for node in lists:
            if node!=None:
                q.put((node.val,node))
        
        dummy=ListNode(0)
        curr=dummy
        
        while q.qsize():
            curr.next=q.get()[1]
            curr=curr.next
            
            if curr.next:
                q.put((curr.next.val,curr.next))
        
        return dummy.next
            