Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.


class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.helper(i,j,word,board):
                    return True
        
        return False
    
    def helper(self,i,j,word,board):
        
        if word=="":
            return True
        
        if i<0 or i>=len(board) or j<0 or j>=len(board[0]) or word[0]!=board[i][j]:
            return False
        temp=board[i][j]
        board[i][j]='#'  
        if self.helper(i+1,j,word[1:],board):
            return True
        if self.helper(i-1,j,word[1:],board):
            return True
        if self.helper(i,j+1,word[1:],board):
            return True
        if self.helper(i,j-1,word[1:],board):
            return True
        board[i][j]=temp
        return False
        
        