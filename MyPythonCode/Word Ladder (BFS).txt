from collections import defaultdict

class Solution:
    # @param start : string
    # @param end : string
    # @param dictV : list of strings
    # @return an integer
    def ladderLength(self, start, end, dictV):
        dictV.append(start)
        dictV.append(end)
        adjList=defaultdict(list)
        
        for first in dictV:
            for last in dictV:
                if first==last:
                    continue
                if first in adjList[last]:
                    adjList[first].append(last)
                else:
                    if self.checkdist(first,last)==1:
                        adjList[first].append(last)
        
        return self.shortestpath(adjList,start,end)
        
    def checkdist(self,A,B):
        
        count=0
        for i in range(len(A)):
            if A[i]!=B[i] and count==0:
                count=1
            elif A[i]!=B[i] and count==1:
                return 0
        
        return 1
    
    def shortestpath(self,adjList,A,B):
        queue=[]
        queue.append(A)
        visited={A:'TRUE'}
        parent={}
        
        
        while queue:
            x=queue.pop()
            if x==B:
                break
            for elem in adjList[x]:
                if elem not in visited:
                    visited[elem]='TRUE'
                    queue.append(elem)
                    parent[elem]=x
        
        y=B
        count=1
        
        while y!=A:
            print y ,
            count=count+1
            y=parent[y]
        
        return count

        
x=Solution()
print(x.ladderLength("hit","cog",["hot","dot","dog","lot","log"]))